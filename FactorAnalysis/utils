#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 17 10:37:56 2019

@author: yangwenli
"""
import pandas as pd
import numpy as np

def handle_outlier(factors, method = 'median'):
    outlier_function = _handle_outlier_by_median if method == 'median' else _handle_outlier_by_std
    date_group = factors.groupby('date', group_keys = False)
    return date_group.apply(outlier_function)

def _handle_outlier_by_std(factors_one_day):
    factors_std = factors_one_day.std()
    factors_mean = factors_one_day.mean()
    
    error_observations_index_large = factors_one_day > factors_mean + 5 * factors_std
    error_observations_index_small = factors_one_day < factors_mean - 5 * factors_std
    error_observations_index = error_observations_index_large | error_observations_index_small
    factors_one_day[error_observations_index] = np.nan
    
    outliers_large = factors_one_day > factors_mean + 3 * factors_std
    outliers_small = factors_one_day < factors_mean - 3 * factors_std
    outliers_large = outliers_large & (~ error_observations_index)
    outliers_small = outliers_small & (~ error_observations_index)
    
    factors_one_day[outliers_large] = factors_mean + 3 * factors_std
    factors_one_day[outliers_small] = factors_mean - 3 * factors_std
    
    return factors_one_day

def _handle_outlier_by_median(factors_one_day):
    factors_median = factors_one_day.median()
    deviation_to_median = factors_one_day - factors_median
    median_of_deviation = deviation_to_median.abs().median()
    
    error_observations_index = deviation_to_median.abs() > 5 * median_of_deviation
    factors_one_day[error_observations_index] = np.nan
    
    outliers_large = deviation_to_median > factors_median + 3 * median_of_deviation
    outliers_small = factors_one_day < factors_median - 3 * median_of_deviation
    outliers_large = outliers_large & (~ error_observations_index)
    outliers_small = outliers_small & (~ error_observations_index)
    
    factors_one_day[outliers_large] = factors_median + 3 * median_of_deviation
    factors_one_day[outliers_small] = factors_median - 3 * median_of_deviation
    
    return factors_one_day

#def fill_missing_values(factors):
    
    
def standardlize_factors(factors):
    return factors.groupby('date', group_keys = False).apply(lambda s:(s - s.mean()) / s.std())

